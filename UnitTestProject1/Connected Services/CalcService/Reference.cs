//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTestProject1.CalcService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcService.ICalc")]
    public interface ICalc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/TestConnection", ReplyAction="http://tempuri.org/ICalc/TestConnectionResponse")]
        string TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/TestConnection", ReplyAction="http://tempuri.org/ICalc/TestConnectionResponse")]
        System.Threading.Tasks.Task<string> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Addition", ReplyAction="http://tempuri.org/ICalc/AdditionResponse")]
        double Addition(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Addition", ReplyAction="http://tempuri.org/ICalc/AdditionResponse")]
        System.Threading.Tasks.Task<double> AdditionAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Subtraction", ReplyAction="http://tempuri.org/ICalc/SubtractionResponse")]
        double Subtraction(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Subtraction", ReplyAction="http://tempuri.org/ICalc/SubtractionResponse")]
        System.Threading.Tasks.Task<double> SubtractionAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Multiplication", ReplyAction="http://tempuri.org/ICalc/MultiplicationResponse")]
        double Multiplication(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Multiplication", ReplyAction="http://tempuri.org/ICalc/MultiplicationResponse")]
        System.Threading.Tasks.Task<double> MultiplicationAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Division", ReplyAction="http://tempuri.org/ICalc/DivisionResponse")]
        double Division(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Division", ReplyAction="http://tempuri.org/ICalc/DivisionResponse")]
        System.Threading.Tasks.Task<double> DivisionAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/GetData", ReplyAction="http://tempuri.org/ICalc/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/GetData", ReplyAction="http://tempuri.org/ICalc/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcChannel : UnitTestProject1.CalcService.ICalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcClient : System.ServiceModel.ClientBase<UnitTestProject1.CalcService.ICalc>, UnitTestProject1.CalcService.ICalc {
        
        public CalcClient() {
        }
        
        public CalcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public double Addition(double a, double b) {
            return base.Channel.Addition(a, b);
        }
        
        public System.Threading.Tasks.Task<double> AdditionAsync(double a, double b) {
            return base.Channel.AdditionAsync(a, b);
        }
        
        public double Subtraction(double a, double b) {
            return base.Channel.Subtraction(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SubtractionAsync(double a, double b) {
            return base.Channel.SubtractionAsync(a, b);
        }
        
        public double Multiplication(double a, double b) {
            return base.Channel.Multiplication(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicationAsync(double a, double b) {
            return base.Channel.MultiplicationAsync(a, b);
        }
        
        public double Division(double a, double b) {
            return base.Channel.Division(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DivisionAsync(double a, double b) {
            return base.Channel.DivisionAsync(a, b);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
    }
}
